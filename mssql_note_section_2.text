DAT201x: Querying with Transact-SQL
This is the ntoe with this course
Student: chin hung tseng
----------------------------------------------------------------------------------------------------------------------------
Section 2:

Modules 3: Querying Multiple Tabels with Joins
Overview
1. Join Concepts
2. Join Syntax
3. Inner Joins
4. Outer Joins
5. Cross Joins
6. Self Joins

Join Concepts
1. Combine rows from multiple tables by specifying matching criteria
   - Usually based on primary key - foreign key relationships
   - For example, return rows that combine data from the Employee and SalesOrder tables by
     matching the Employee.EmployeeID primary key to the SalesOrder.EmployeeID foreign key
2. It helps to think of the tables as sets in a Venn diagram

Join Syntax
1. ANSI SQL-92
  - Tables joined by JOIN operator in FROM Clause
  - Preferred syntax
  |--------------------------|
  | SELECT ...               |
  | FROM  Table1 JOIN Table2 |
  |       ON <on_predicate>; |
  |--------------------------|

2. ANSI SQL-89
  - Tables joined by commas in FROM Clause
  - Not recommended: Accidental Cartesian products!
  |--------------------------|
  | SELECT ...               |
  | FROM  Table1, Table2     |
  | WHERE <where_predicate>; |
  |--------------------------|
  
Key Points and Additional Reading
1. Key Points
   - Joins are used to match rows in one table to rows in another table.
   - The query engine supports two ways to define joins: the ANSI SQL-92 syntax (in which the join is specified in the FROM clause) 
     and the older ANSI SQL-89 syntax (in which the join is specified in the WHERE clause). 
     The ANSI SQL-92 syntax is the preferred approach.
2. Additional Reading
   - Review the documentation on Join Fundamentals in SQL Server 2008 R2 Books Online.
     (https://technet.microsoft.com/en-us/library/ms191517(v=sql.105).aspx)

------------------------------------------------------------------------------

Inner Joins
1. Return only rows where a match is found in both input tables
2. Match rows based on attributes supplied in predicate
3. If join predicate operator is =, also known as equi-join
  |--------------------------------------|
  | SELECT emp.FirstName, ord.Amount     |
  | FROM HR.Employee AS emp              |
  | [INNER] JOIN Sales.SalesOrder AS ord |
  | ON emp.EmployeeID = ord.EmployeeID   |
  |--------------------------------------|

DEMO
- Basic inner join
SELECT salesLT.Product.Name AS ProductName, SalesLT.ProductCategory.Name AS Category
FROM SalesLT.Product
INNER JOIN SalesLT.ProductCategory
ON SAlesLT.Product.ProductCategoryID = SalesLT,ProductCategory.ProductCategoryID;

- Table aliaes
SELECT p.Name AS ProductName, c.Name AS Categroy
FROM SalesLT.Product AS p
JOIN SalesLT.ProductCategory AS c
ON p.ProductCategoryID = c.ProductCategoryID;

- Joining more than 2 tabels
SELECT oh.OrderDate, oh.SalesOrderNumber, p.Name AS ProductName, od.OrderQty, od, UnitPrice, od.LIneTotal
FROM SalesLT.SalesOrderHeader AS oh
JOIN SalesLT.SalesOrderDetail AS od
ON od.SalesOrderId = oh.SalesOrderID
JOIN SalesLT.Product AS p
ON od.PreductID = p.ProductID
ORDER BY oh.OrderDatem oh.SalesOrderID, od.SalesOrderDetailID;

- Multiple join predicates
SELECT oh.OrderDate, oh.SalesOrderNumber, p.Name AS ProductName, od.OrderQty, od, UnitPrice, od.LIneTotal
FROM SalesLT.SalesOrderHeader AS oh
JOIN SalesLT.SalesOrderDetail AS od
ON od.SalesOrderId = oh.SalesOrderID
JOIN SalesLT.Product AS p
ON od.PreductID = p.ProductID AND od.UnitePrice < p.ListPrice --Note multiple predicates
ORDER BY oh.OrderDate, oh.SalesOrderID, od.SalesOrderDetailID;

Key Points and Additional Reading
1. Key POints
   - Inner joins return only rows where a match can be found in both tables.
   - Inner joins that rows based on columns containing the same value in both tables are sometimes referred to as equi-joins.
2. Additional Reading
   - Review the documentation on Using Inner Joins in SQL Server 2008 R2 Books Online.
   (https://technet.microsoft.com/en-us/library/ms190014(v=sql.105).aspx)

Note that while this documentation is based on a previous release of SQL Server, 
the information it contains is still relevant for Transact-SQL queries in SQL Server and Azure SQL Database.

------------------------------------------------------------------------------

Outer Joins 
1. Return all rows from one table and any matching rows from second table
2. One table's rows are "preserved"
   - Designated with LEFT, RIGHT, FULL keyword
   - All rows from preserved table output to result set
3. Matches from othe rtable retrieved
4. Additional rows added to results for non-matched rows
   - NULLs added in places where attributes do not match
5. Example: Return all tmployees and for those who have taken orders, return the order amount.
   Employees without matching orders will display NULL for order amount.
   |-------------------------------------------|
   | SELECT emp.FirstName, ord.Amount          |
   | FROM HR.Employee AS emp                   |
   | LEFT [OUTER] JOIN Sales.SalesOrder AS ord |
   | ON emp.EmployeeID = ord.EmployeeID;       |
   |-------------------------------------------|

DEMO
- Get all customers, with sales orders for those who've bought anythin
SELECT c.FirstName, c.LastName, oh.SalesOrderNumber
FROM SalesLT.Customer AS c
LEFT OUTER JOIN SalesLT.SalesOrderHeader AS oh
ON c.CustmerID = oh.CustomerID;

- Return only customers who haven't purchased anything
SELECT c.FirstName, c.LastName, oh.SalesOrderNumber
FROM SalesLT.Customer AS c
LEFT OUTER JOIN SalesLT.SalesOrderHeader AS oh
ON c.CustomerID = oh.CustomerID
WHERE oh.SalesOrderNumber IS NULL
ORDER BY c.CustomerID;

- More than 2 tables
SELECT p.Name AS ProductName, oh.SalesOrderNumber
FROM SalesLT.Product AS p
LEFT JOIN SalesLT.SalesOrderDetail AS od
ON p.ProductID = od.ProductID
LEFT JOIN SalesLT.SalesOrderHeader AS oh --Additional tabels added to the right must also use
ON od.salesOrderID = oh.SalesOrderID
ORDER BY p.ProductID;

SELECT p.Name AS ProductName, c.Name AS Category, oh.SalesOrderNumber
FROM SalesLT.Product AS p
LEFT OUTER JOIN SalesLT.SalesOrderDetail AS od
ON p.ProductID = od.ProductID
LEFT OUTER JOIN SalesLT.SalesOrderHeader AS oh 
ON od.salesOrderID = oh.SalesOrderID
INNER JOIN SalesLT.ProductCategory AS c --Added to the left, so can use inner join
ON p.ProductCategoryID = c.ProductCategoryID
ORDER BY p.ProductID;

Key Points and Additional Reading
1. Key Points
   - Use a Left Outer Join to include all rows from the first table and values from matched rows in the second table. 
     Columns in the second table for which no matching rows exist are populated with NULLs.
   - Use a Right Outer Join to include all rows from the second table and values from matched rows in the first table. 
     Columns in the first table for which no matching rows exist are populated with NULLs.
   - Use a Full Outer Join to include all rows from the first and second tables. 
     Columns in the either table for which no matching rows exist are populated with NULLs.

2. Additional Reading
   - Review the documentation on Using Outer Joins in SQL Server 2008 R2 Books Online.
   (https://technet.microsoft.com/en-us/library/ms187518(v=sql.105).aspx)

Note that while this documentation is based on a previous release of SQL Server, 
the information it contains is still relevant for Transact-SQL queries in SQL Server and Azure SQL Database.

------------------------------------------------------------------------------

Cross Joins
1. Combine each row from first table with each row from second table
2. All possible conbinations output

   |------------------------|   |-----------------------|
   |         Employee       |   |        Product        |
   |------------|-----------|   |-----------|-----------|
   | EmployeeID | FirstName |   | ProductID | Name      |
   |------------|-----------|   |-----------|-----------|
   | 1          | Dan       |   | 1         | Widget    |
   | 2          | Alsha     |   | 2         | Gizmo     |
   |------------|-----------|   |-----------|-----------|
   
   |---------------------------------------|
   | SELECT emp.FirstName, prd.Name        |
   | FROM HR.Employee AS emp               |
   | CROSS JOIN Production.Product AS prd; |
   |---------------------------------------|
   
   |------------------------|  
   |          Result        |  
   |------------|-----------|   
   | FirstName  | Name      | 
   |------------|-----------|   
   | Dan        | Widget    |   
   | Dan        | Gizmo     |  
   | Alsha      | Widget    |  
   | Alsha      | Gizmo     |  
   |------------|-----------|

3. Logical foundation for inner and outer joins
   - Inner join starts with Cartesian product, adds filter
   - Outer join takes Cartesian output, filtered, adds back non-matching rows(with NULL placeholders)
4. Due to Cartesian product output, not typically a desired form of join 
   -Some useful exceptions:
     -Table of numbers, generating data for testing

DEMO
-Call each customer once per product
SELECT p.Name, c.FirstName, c.LastName, c.Phone
FROM SalesLT.Product AS p
CROSS JOIN SalesLT.Customer AS c;

Key Points and Additional Reading
1. Key Points
   - A cross join returns a Cartesian product that includes every combination of the selected columns from both tables.
   - While not commonly used in typical application processing, cross joins can be useful in some specialized scenarios
     such as generating test data.
2. Additional Reading
   - Review the documentation on Using Cross Joins in SQL Server 2008 R2 Books Online.
   (https://technet.microsoft.com/en-us/library/ms190690(v=sql.105).aspx)

------------------------------------------------------------------------------

Self Joins
1. Compare rows in same table to each other 
2. Create two instance of same table in FROM clause
   - At least one alias required
3. Example: Return all employees and the name of the employee's namager

   |-------------------------------------|
   |                Employee             |
   |------------|-----------|------------|
   | EmployeeID | FirstName | ManangerID |
   |------------|-----------|------------|
   | 1          | Dan       | NULL       |
   | 2          | Aisha     | 1          |
   | 3          | Rosie     | 1          |
   | 4          | Naomi     | 3          |
   |------------|-----------|------------|
   
   |------------------------------------|
   | SELECT emp.FirstName AS Employee,  |
   |        man.FirstName AS Manager    |
   | FROM HR.Employee AS emp            |
   | LEFT JOIN HR.Employee AS man       |
   | ON emp.ManagerID = man.EmployeeID; |
   |------------------------------------|
   
   |------------------------|
   |           Result       |
   |-----------|------------|
   | Employee  | Mananger   |
   |-----------|------------|
   | Dan       | NULL       |
   | Aisha     | Dan        |
   | Rosie     | Dan        |
   | Naomi     | Rosie      |
   |-----------|------------|

DEMO
- note there's no employee table, so we'll create one for this example
CREATE TABLE SalesLT.Employee
(EmployeeID int IDENTITY PRIMARY KEY,
EmployeeName nvarchar(256),
ManagerID int);
GO

- Get salesperson from Customer table and generate managers
INSERT INTO SalesLT.Employee (EmployeeName, ManagerID)
SELECT DISTINCT Salesperson, NULLIF(CAST(RIGTH(SalesPerson, 1) AS INT), 0)
FROM SalesLT.Cusomer;
GO
UPDATE SalesLT.Employee
SET ManagerID = (SELECT MIN(EmployeeID) FROM SalesLT.Employee WHERE ManagerID IS NULL)
WHERE ManagerID IS NULL
AND EmployeeID > (SELECT MIN(EmployeeID) FROM SalesLT.Employee WHERE ManagerID IS NULL);
GO

- Here's the actual self-join demo
SELECT e.EmployeeName, m.EmployeeName AS ManagerName
FROM SalesLT.Employee AS e
LEFT JOIN SalesLT AS m
ON e.ManagerID = m.EmployeeID
ORDER BY e.ManagerID;

Key Points and Additional Reading
1. KEY POINTS
   - A self-join is an inner, outer, or cross join that matches rows in a table to other rows in the same table. 
   - When defining a self-join, you must specify an alias for at least one instance of the table being joined.
2. ADDITIONAL READING
   - Review the documentation on Using Self-Joins in SQL Server 2008 R2 Books Online.
   (https://technet.microsoft.com/en-us/library/ms177490(v=sql.105).aspx)
  
------------------------------------------------------------------------------
  
Modules 4: Using Set Operators

Overeview
- What are UNION Queries?
- What are INTERSECT Queries?
- what are EXCEPT Queries?

What are UNION Queries?
1. UNION returns a result set of distinct rows combined from all statements
2. UNION removes duplicates during query processing (affect performance)
3. UNION ALL return duplicates during query processing

-- only distinct rows from both queries are returned 
SELECT countryregion, city FROM HR.Employees
UNION
SELECT countryregion, city FROM Sales.Customers;

UNION Guidelines
1. Column aliases
   - Must be expressed in first query
2. Number of columns 
   - Must be the same 
3. Data tyeps
   - Must be compatible for implicit conversion (or converted explicitly)

DEMO
SELECT FirstName, LastName, 'Employee' AS Type
FROM SlesLT.Employees
UNION 
SELECT FirstName, LastName, 'Customer'
FROM SalesLT.Cusomers
ORDER BY LastName;

Key Points and Additional Reading
1. Key Points
   - Use UNION to combine the rowsets returned by multiple queries.
   - Each unioned query must rturn the same number of columns with copatible data types.
   - By default, UNION eliminates duplicate rows. Specify the ALL option to include duplicates
     (or to avoid the overhead of checking for dulplicates when you know in advance that there are none).
2. Additional Reading
   -Review the documentation on UNION in the Transact-SQL Reference.
   (https://msdn.microsoft.com/en-us/library/ms180026.aspx)
   
------------------------------------------------------------------------------

INTERSECT and EXCEPT Queries

What are INTERSECT Queries?
- INTERSECT returns only distinct rows that appear in both result sets
 |----------------------------------------------------------|
 | -- only rows that exist in both queries will be returned |
 | SELECT countryregion, city FROM HR.Employees             |
 | INTERSECT                                                |
 | SELECT countryregion, city FROM Sales.Customers;         |
 |----------------------------------------------------------|

What are EXCEPT Queries?
- EXCEPT returns only distinct rows that appear in the first set but not the second
  Order in which sets are specified matters
 |--------------------------------------------------|
 | -- only rows from Employees will be returned     |
 | SELECT countryregion, city FROM HR.Employees     |
 | EXCEPT                                           |
 | SELECT countryregion, city FROM Sales.Customers; |
 |--------------------------------------------------|
 
DEMO
-- INTERSECT
SELECT FirstName, LastName
FROM SlesLT.Employees
INTERSECT
SELECT FirstName, LastName
FROM SalesLT.Cusomers

-- EXCEPT
SELECT FirstName, LastName
FROM SlesLT.Employees
EXCEPT
SELECT FirstName, LastName
FROM SalesLT.Cusomers

Key Points and Additional Reading
1. Key Points
   - Use INTERSECT to return only rows that are returned by both queries.
   - Use EXCEPT to return rows from the first query that are not returned by the second query.
2. Additional Reading
   - Review the documentation on EXCEPT and INTERSECT in the Transact-SQL Reference.
   (https://msdn.microsoft.com/en-us/library/ms188055.aspx)

------------------------------------------------------------------------------

Modules 5: Using Functions and Aggregating Data

Introduction to Built-In Functions

 |-------------------|----------------------------------------------------------------------------------|
 | Function Category | Description                                                                      |
 |-------------------|----------------------------------------------------------------------------------|
 | Scalar            | Operate on a single row, return a single value                                   |
 | Logical           | Scalar functions that compare multiple values to determine a single output       | 
 | Aggregate         | Take one or more input values, return a single summarizing value                 |
 | Window            | Operate on a window (set) of rows                                                |
 | Rowset            | Return a virtual table that can be used subsequently in a Transact-SQL statement |
 |-------------------|----------------------------------------------------------------------------------|

------------------------------------------------------------------------------
Scalar Functions
1. Opertae on elements from a single row as inputs, return a single value as output
2. Return a single (scalar) value
3. Can be used like an expression in queries
4. May be deterministic or non-deterministic

 |----------------------------|
 | Scalar Function Categories |
 |----------------------------|
 | Configuration              |
 | Conversion                 |
 | Cursor                     |
 | Date and Time              |
 | Mathemetical               |
 | Metadata                   |
 | Security                   |
 | String                     |
 | System                     |
 | System Statistical         |
 | Text and Image             |
 | ...                        |
 |----------------------------|

DEMO
-- Scalar Function
SELECT YEAR(sellStartDate) SellStartYear, ProductID, Name
FROM SalesLT.Product
ORDER BY SellStartYear;

SELECT YEAR(sellStartDate) sellStartYear, DATENAME(mm, sellStartDate) sellStartMonth,
       DAY(sellStartDate) sellStartDay, DATENAME(dw, sellStartDate) sellStartWeekday,
       ProduceID, Name
FROM SalesLT.Product
ORDER BY SellStartYear;

SELECT DATEDIFF(yy, sellStartDate, GETDATE()) YearsSold, ProductID, Name
FROM SalesLT.Procuct
ORDER BY ProductID;

SELECT UPPER(Name) AS ProductName
FROM SalesLT.Product;

SELECT CONCAT(FirstName + ' ', LastName) AS FullName
FROM SalesLT,Customer;

SELECT Name, ProsuctNumber, LEFT(ProductNumber, 2) AS ProductType
FROM SalesLT.Customer;

SELECT Name, ProsuctNumber, LEFT(ProductNumber, 2) AS ProductType
                            SUBSTRING(ProductNumber, CHARINDEX('-', ProductNumber) + 1, 4) AS ModelCode,
                            SUBSTRING(ProductNumber, LEN(ProductNumber) - CHARINDEX('-', REVERSE(RIGHT(ProductNumber, 3))), + 2, 2) AS SizeCode
FROM SalesLT.Product;


Logical Functions
- Output is determined by comparative logic
   1. ISNUMERIC
     |--------------------------------------------|
     | SELECT ISNUMERIC('101.99') AS Is_a_Number; |
     |--------------------------------------------|
     
   2. IIF
     |-------------------------------------------------------------------------------|
     | SELECT productid, listprice, IIF(listprice > 50, 'high', 'low') AS PricePoint |
     | FROM Production.Product;                                                      |
     |-------------------------------------------------------------------------------|
     
   3. CHOOSE
     |------------------------------------------------------------------------------------------------|
     | SELECT ProductName, Color, Size,                                                               |
     |        CHOOSE(ProductCategoryID, 'Bikes', 'Components', 'Clothing', 'Accessories') AS Category |
     | FROM Production.Product;                                                                       |
     |------------------------------------------------------------------------------------------------|

DEMO 
-- Logical Functions
SELECT Name, Size AS NumericSize
FROM SalesLT.Product
WHERE ISNUMERIC(Size) = 1;

SELECT Name, IIF(ProductCategoryID IN (5, 6, 7), 'Bike', 'Other') ProductType
FROM SalesLT.Produce;

SELECT Name, IIF(ISNUMERIC(Size) = 1, 'Numeric', 'Non-Numeric') SizeType
FROM SalesLT.Product;

SELECT prd.Name AS ProductName, cat.Name AS Category,
       CHOOSE(cat.ParentProductCategoryID, 'Bikes', 'Components', 'Clothing', 'Accessories') AS ProductType
FROM SalesLT.Product AS prd
JOIN SalesLT.ProductCategory AS cat
ON prd.ProductCategoryID = cat.ProductCategoryID;


Window Functions
1. Functions applied to a window, or set of rows
2. Include ranking, offset, aggregate and distribution functions
   |------------------------------------------------------------|
   | SELECT TOP(3) ProductID, Name, ListPrice,                  |
   |        RANK() OVER(ORDER BY ListPrice DESC) AS RankByPrice |
   | FROM Production.Product                                    |
   | ORDER BY RankByPrice;                                     |
   |------------------------------------------------------------|
                                ||
                                \/
        |-----------|-----------|-----------|-------------|
        | ProductID | Name      | ListPrice | RankByPrice |
        |-----------|-----------|-----------|-------------|
        | 8         | Gizmo     | 263.50    | 1           |
        | 29        | Widget    | 123.79    | 2           |
        | 9         | Thingybob | 97.00     | 3           |
        |-----------|-----------|-----------|-------------|

DEMO
-- Window Functions
SELECT TOP(100) ProductID, Name, ListPrice,
       RANK() OVER(ORDER BY ListPrice DESC) AS RankByPrice
FROM SalesLT.Product AS p
ORDER BY RankByPrice;

SELECT c.Name AS Category, p.Name AS Product, ListPrice,
       RANK() OVER(PARTITION BY c.Name ORDER BY ListPrice DESC) AS RankByPrice
FROM SalesLT.Product AS p
JOIN SalesLT.ProductCategory AS c
ON p.ProductCategoryID = c.ProductcategoryID
ORDER BY Category, RankByPrice;


Aggregate Functions
1. Functions that operate on sets, or rows of data
2. Summarize input rows
3. Without GROUP BY clause, all rows are arranged as one group
   |----------------------------------------------|
   | SELECT COUNT(*) AS OrderLines,               |
   |        SUM(OrderQty*UnitPrice) AS TotalSales |
   | FROM Sales.OrderDetail;                      |
   |----------------------------------------------|
                           ||
                           \/
              |------------|-------------|
              | OrderLines | TotalSales  |
              |------------|-------------|
              | 542        | 714002.9136 |
              |------------|-------------|

DEMO
-- Aggregate Functions
SELECT COUNT(*) AS Products, COUNT(DISTINCE ProductCategoryID) AS Categories, AVG(ListPrice) AS AveragePrice
FROM SalesLT,Product;

SELECT COUNT(p.ProductID) BikeMOdels, AVG(p.ListPrice) AveragePrice
FROM SalesLT.Product AS p
JOIN SalesLT.ProductCategory AS c
ON p.ProductCatetoryID = c.ProductCategoryID
WHERE c.Name LIKE '%Bikes';


Key Points and Additional Reading
1. Key Points
   - Scalar functions return a single value based on zero or more input parameters.
   - Logical functions return Boolean values (true or false) based on an expression or column value.
   - Window functions are used to rank rows across partitions or "windows". Window functions include RANK, DENSE_RANK, NTILE, and ROW_NUMBER.
   - Aggregate functions are used to provide summary values for multiple rows - 
     for example, the total cost of products or the maximum number of items in an order.
     Commonly used aggregate functions include SUM, COUNT, MIN, MAX, and AVG.
2. Addtional Reading
   Review the documentation on Built-In Functions in the Transact-SQL Reference.
   (https://msdn.microsoft.com/en-us/library/ms174318.aspx)

------------------------------------------------------------------------------

Grouping with GROUP BY

1. GROUP BY creates groups for output rows, according to a unique combination of values specified in the GROUP BY clause
2. GROUP BY calculates a summary value for aggregate functions in subsequent phases
3. Detail rows are "lost" after GROUP BY clause in processed
   |---------------------------------------| 
   | SELECT CustomerID, COUNT(*) AS Orders |
   | FROM Sales.SalesOrderHeader           |
   | GROUP BY CustomerID;                  |
   |---------------------------------------| 

DEMO
SELECT c.Salesperson, ISNULL(SUM(oh.Subtotal), 0.00) SalesRevenue
FROM SalesLT.Customer c
LEFT JOIN SalesLT.SalesOrderHeader oh
ON c.CustomerID = oh.CustomerID
GROUP BY c.Salesperson
ORDER BY SalesRevenue DESC;

SELECT c.salesperson, CONCAT(c.FirstName + ' ', c.LastName) AS Customer, ISNULL(SUM(oh.SubTotal), 0.00) SalesRevenue
FROM SalesLT.Customer c
LEFT JOIN SlaesLT.SalesOrderHeader oh
ON c.CustomerID = oh.CustomerID
GROUP BY c.Salesperson, CONCAT(c.FirstName + ' ', c.LastName)
ORDER BY SalesRevenue DESC, Custmer;
   

Filtering with HAVING

1. HAVING clause provides a search condition that each group must satisfy
2. WHERE clause is processed before GROUP BY, HAVING clause is processed after GROUP BY
   |---------------------------------------|
   | SELECT CustomerID, COUNT(*) AS Orders |
   | FROM Sales.SalesOrderHeader           |
   | GROUP BY CustomerID                   |
   | HAVING COUNT(*) > 10;                 |
   |---------------------------------------|

DEMO
SELECT ProductID, SUM(sod, OrderQty) AS Quantity
FROM SalesLT.SalesOrderDetail AS sod
JOIN SalesLT.SalesORderHeader AS soh
ON sod.SalesOrderID = soh.SalesOrderID 
WHERE YEAR(soh.OrderDate) = 2008 
GROUP BY ProduceID

SELECT ProductID, SUM(sod, OrderQty) AS Quantity
FROM SalesLT.SalesOrderDetail AS sod
JOIN SalesLT.SalesORderHeader AS soh
ON sod.SalesOrderID = soh.SalesOrderID 
WHERE YEAR(soh.OrderDate) = 2008 AND SUM(sod.OrderQty) > 50  # That will error!
GROUP BY ProduceID

SELECT ProductID, SUM(sod, OrderQty) AS Quantity
FROM SalesLT.SalesOrderDetail AS sod
JOIN SalesLT.SalesORderHeader AS soh
ON sod.SalesOrderID = soh.SalesOrderID 
WHERE YEAR(soh.OrderDate) = 2008
GROUP BY ProduceID
HAVING SUM(sod.OrderQty) > 50  # Without erro by adding HAVING clause

Key Points and Additional Reading
1. Key Points
   - You can use GROUP BY with aggregate functions to retuern aggregations grouped by one or more columns or expressions.
   - All columns in the SELECT clause that are not aggregate funciton expressions must be incluede in a GROUP BY clause.
   - The order in which columns or expressions are listed in the GROUP BY clause determines the grouping hierarchy.
   - You can filter the groups that are included in the query results by specifying a HAVING clause.
2. Additional Reading
   Review the documentation on GROUP BY and HAVING in the Transact-SQL Reference
   - GROUP BY - (https://msdn.microsoft.com/en-us/library/ms177673.aspx)
   - HAVING - (https://msdn.microsoft.com/en-us/library/ms180199.aspx)

Note that this module has discussed only simple GROUP BY queries. 
General GROUP BY clauses that include grouping sets, ROLLUP, or CUBE operators are covered later in the course
